1.查看Django版本
python -m django --version

2.创建Django项目
django-admin startproject myblog

3.查看manage.py参数
python manage.py

4.启动命令
python manage.py runserver
注：默认为8000
python manage.py runserver 9999

5.wsgi.py
WSGI(Python Web Server Gateway Interface)
python服务器网关接口：Python应用与Web服务器之间的接口
6.urls.py
URL配置文件
Django项目中所有地址（页面）都需要我们自己去配置其URL
7.setting.py
项目的总配置文件，里面包含了数据库、Web应用、时间等各种配置

8.创建应用
进入项目中manage.py同级
python manage.py startapp blog
添加应用名到settings.py中的INSTALLED_APPS里

9.应用目录的结构
migrations 数据移植（迁移）模块
    _init_.py
_init_.py
admin.py   该应用的后台管理系统配置
apps.py    该应用的一些配置，Django1.9以后自动生成
models.py  数据模块，使用ORM框架，类似于MVC结构中的Models（模型)
tests.py  自动化测试模块，在这里编写测试脚本
views.py  执行响应的代码所在模块，代码逻辑处理的主要地点，项目中大部分代码均在这里编写

10.创建页面
编辑blog.views
每个响应对应一个函数，函数必须返回一个响应
函数必须存在一个参数，一般约定为request
每一个响应（函数）对应一个URL

11.编辑urls.py
每个URL都以url的形式写出来
url函数放在urlpatterns列表中
url函数三个参数：URL（正则），对应方法，名称
----第二种URL配置
包含其他URL
在根urls.py中引入include
在APP目录下创建urls.py文件，格式与根urls.py相同
根urls.py中url函数第二个参数改为include ('blog.urls')

注：根urls.py针对APP配置的URL名称，是该APP所有URL的总路径
配置URL时注意正则表达式结尾符号$和/

12.开发Template
在APP的根目录下创建名叫Templates目录
在该目录下创建HTML文件
在views.py中返回render ()

Django查找Template
按照INSTALLED_APPS中添加顺序查找Templates
不同APP下Templates目录中的同名.html文件会造成冲突

解决方案：
在APP的Templates创建以APP名为名称的目录，将html文件放入新创建的目录下

13.DTL初步使用
render()函数中支持一个dict类型参数
该字典是后台传递到模板的参数，键为参数名
在模板中使用{{参数名}}来直接使用

14.Django中的Models
通常，一个Model对应数据库的一张数据表
Django中的Models以类的形式表现
它包含了一些基本字段以及数据的一些行为

ORM(Object Relation Mapping)对象关系映射
实现了对象和数据库之间的映射
隐藏了数据访问的细节，不需要编写SQL语句

在应用根目录下创建models.py，并引入models模块
创建类，继承models.Model，该类即是一张数据表
在类中创建字段
字段即类里的属性（变量）
attr = models.CharField(max_length=64)

15.生成数据表
进入manag.py同级目录
执行python manage.py makemigrations app名（可选）
在执行python manage.py migrate
查看 
Django会自动在app/migrations/目录下生成移植文件
在执行python manage.py sqlmigrate 应用名 文件id查看SQL语句
默认sqlite3的数据库在项目根目录下db.sqlite3(SQLite Expert Personal工具查看并编辑)

16.页面呈现数据
后台
views.py 中import models
article = models.Article.objects.get(pk=1)
render(request,page,{'article':article})
前端
模板可直接使用对象以及对象的"."操作{{article.title}}

17.Admin
Admin是Django自带的一个功能强大的自动化数据管理页面
被授权的用户可直接Admin中管理数据库
Django提供了许多针对Admin的定制功能

配置Admin
创建超级用户python manage.py createsuperuser
Admin入口 localhost:8000/admin/

修改settings.py中LANGUAGE_CODE = 'zh_Hans'
语言修改为中文

配置应用
在应用下admin.py中引入自身的models模块（或里面的模型类）
编辑admin.py:admin.sit.register(models.Article)

修改数据
点击Article超链接进入Article列表页面
点击任意一套数据，进入编辑页面修改
编辑页面下方一排按钮可执行相应操作
步骤：
在Article类下添加一个方法
根据Python版本选择_str_(self)或_unicode_(self)
return self.title

18.博客设计
页面概要：
博客主页面
博客文章内容页面
博客撰写页面

主页面内容：
文章标题列表，超链接
发表博客按钮（超链接）

列表编写思路：
取出数据库中所有文章对象
将文章对象们打包成列表，传递到前端
前端页面把文章以标题超链接的形式逐个列出

页面内容：
标题、文章内容、修改文章按钮（超链接）

模块For循环
{% for xx in xxs %}
HTML语句
{% endfor %}

19.
URL传递参数
参数写在响应函数中request后，可以有默认值
URL正则表达式：r' ^/article/(?P<article_id>[0-9]+)/$
URL正则中组名必须和参数名一致

Django超链接目标地址
href后面是目标地址
template中可以用"{%url 'app_name:url_name' param%}"
其中app_name和url_name都在url中配置

url函数的名称参数
 根urls，写在include()的第二个参数位置，namespace='blog'
 应用下则写在url()的第三个参数位置，name='article'
 
20.编辑响应函数
使用request.POST['参数'] 获取表单数据
models.Article.objects.create(title,content)创建对象
涉及POST方法提交表单的，前端页面加上{% csrf_token %}

两个编辑页面的思路：
新文章为空，修改文章有内容
修改文章页面有文章对象
文章的ID

修改数据
article.title=title
article.save()

21.Templates过滤器
写在模板中，属于Django模板语言
可以修改模板中的变量，从而显示不同的内容

怎么使用过滤器？
{{ value | filter}}
例如：{{ list_nums | length}}
过滤器可叠加：{{ value |filter1|filter1|...}}

22.Django Shell
它是一个Python的交互式命令行程序
它自动引入了我们的项目环境
我们可以使用它与我们的项目进行交互

如何使用Django Shell？
python manage.py shell
from blog.models import Article
Article.objects.all()

有什么用？
我们可以使用Django shell来进行一些调试工作测试位置的方法

23.创建admin配置类
class ArticleAdmin(admin.ModelAdmin)
注册：admin.site.register(Article,ArticleAdmin)

显示其他字段
list_display =('title','content')
list_display同时支持tuple和list

过滤器
list_filter =('pub_time',)








